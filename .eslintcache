[{"C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\index.js":"1","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\App.js":"2","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\reportWebVitals.js":"3","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\Header.js":"4","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\Newsfeed.js":"5","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\Stats.js":"6","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\LineGraph.js":"7","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\StatsRow.js":"8","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\firebase.js":"9","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\TimeLine.js":"10","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\Chip.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":420,"mtime":1610793367832,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":827,"mtime":1610711380783,"results":"16","hashOfConfig":"13"},{"size":2182,"mtime":1611661993450,"results":"17","hashOfConfig":"13"},{"size":3652,"mtime":1611597633849,"results":"18","hashOfConfig":"13"},{"size":2635,"mtime":1610806134636,"results":"19","hashOfConfig":"13"},{"size":1489,"mtime":1611667448624,"results":"20","hashOfConfig":"13"},{"size":480,"mtime":1611317840089,"results":"21","hashOfConfig":"13"},{"size":643,"mtime":1611598354654,"results":"22","hashOfConfig":"13"},{"size":419,"mtime":1611661030366,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"3d9dr8",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\index.js",[],["50","51"],"C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\App.js",[],"C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\reportWebVitals.js",[],"C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\Header.js",["52","53","54","55","56"],"import React from 'react';\r\nimport Logo from './robinhood.svg';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header__wrapper\">\r\n            <div className=\"header__logo\">\r\n                <img src={Logo} alt=\"\" width={25}/>\r\n            </div>\r\n            <div className=\"header__search\">\r\n                <div className=\"header__searchContainer\">\r\n                    <input placeholder=\"Search\" type=\"text\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"header__menuItems\">\r\n                <a href=\"#\">Free Stocks</a>\r\n                <a href=\"#\">Portfolio</a>\r\n                <a href=\"#\">Cash</a>\r\n                <a href=\"#\">Messages</a>\r\n                <a href=\"#\">Account</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\Newsfeed.js",["57"],"C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\Stats.js",["58","59"],"import React, { useState, useEffect } from 'react';\r\nimport './Stats.css';\r\nimport axios from \"axios\";\r\nimport StatsRow from './StatsRow';\r\nimport { db } from './firebase';\r\n\r\nconst TOKEN = 'c0411o748v6qfu3ufb30';\r\nconst BASE_URL = 'https://finnhub.io/api/v1/quote';\r\n\r\nfunction Stats() {\r\n\r\n    const [stockData, setstockData] = useState([]);\r\n    const [myStocks, setMyStocks] = useState([]);\r\n\r\n    const getMyStocks = () => { //get stocks from firebaseDB\r\n        db.collection('myStocks')\r\n        .onSnapshot(snapshot => {\r\n            let promises = [];\r\n            let tempData = [];\r\n\r\n            snapshot.docs.forEach((doc) => {\r\n                promises.push(getStockData(doc.data().ticker) //get data from API (name of stock is an argument) => get promises and pushing them in the promises array\r\n                    .then(res => {\r\n                        tempData.push({ //pushing objects in array of data\r\n                        id: doc.id, \r\n                        data: doc.data(),\r\n                        info: res.data //response from getStockData\r\n                    })\r\n                })\r\n            )})\r\n            \r\n            Promise.all(promises).then(()=>{ //wait when all promises is finished\r\n                setMyStocks(tempData);\r\n            })\r\n        })\r\n    };\r\n\r\n    const getStockData = (stock) => {\r\n        return axios\r\n          .get(`${BASE_URL}?symbol=${stock}&token=${TOKEN}`)\r\n          .catch((error) => {\r\n              console.error(\"Error\", error.message);\r\n          });\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        let tempStocksData = [];\r\n        const stocksList = [\"AAPL\", \"MSFT\", \"TSLA\", \"FB\", \"UBER\", \"DIS\", \"SBUX\"];\r\n        let promises = [];\r\n        getMyStocks();\r\n        stocksList.map((stock) => {\r\n            promises.push(\r\n                getStockData(stock)\r\n                .then((res) => {\r\n                    tempStocksData.push({\r\n                        name: stock,\r\n                        ...res.data\r\n                    })\r\n                })\r\n            )\r\n        });\r\n\r\n        Promise.all(promises).then(() => { //wait when all promises is finished\r\n            setstockData(tempStocksData); \r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"stats\">\r\n            <div className=\"stats__container\">\r\n                <div className=\"stats__header\">\r\n                    <p>Stocks</p>\r\n                </div>\r\n                <div className=\"stats__content\">\r\n                    <div className=\"stats__rows\">\r\n                        {myStocks.map((stock) => (\r\n                            <StatsRow\r\n                                key={stock.data.ticker}\r\n                                name={stock.data.ticker}\r\n                                openPrice={stock.info.o}\r\n                                shares={stock.data.shares}\r\n                                price={stock.info.c}/>\r\n                        ))} \r\n                    </div>\r\n                </div>\r\n                <div className=\"stats__header stats__lists\">\r\n                    <p>Lists</p>\r\n                </div>\r\n                <div className=\"stats__content\">\r\n                    <div className=\"stats__rows\">\r\n                        {stockData.map((stock) => (\r\n                            <StatsRow\r\n                                key={stock.name}\r\n                                name={stock.name}\r\n                                openPrice={stock.o}\r\n                                price={stock.c}/>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stats;\r\n","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\LineGraph.js",["60"],"import React, {useEffect, useState} from 'react';\r\nimport {Line} from \"react-chartjs-2\";\r\nimport './LineGraph.css';\r\n\r\nfunction LineGraph() {\r\n\r\n    const [graphData, setGraphData] = useState([]);\r\n\r\n    const data = [{\r\n        x: 10,\r\n        y: 20\r\n    }, {\r\n        x: 15,\r\n        y: 10\r\n    }, {\r\n        x: 12,\r\n        y: 4\r\n    }]\r\n\r\n    const createMockData = () => {\r\n        let data = [];\r\n        let value = 50;\r\n        for (var i = 1; i < 366; i++){\r\n            let date = new Date();\r\n            date.setHours(0,0,0,0);\r\n            date.setDate(i);\r\n            value += Math.round((Math.random() < 0.5 ? 1 : 0) * Math.random() * 10);\r\n            data.push({x: date, y: value});\r\n        }\r\n        setGraphData(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        createMockData();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"linegraph\">\r\n            <Line\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            type: \"line\",\r\n                            data: graphData,\r\n                            backgroundColor: \"black\",\r\n                            borderColor: \"#5AC53B\",\r\n                            borderWidth: 2,\r\n                            pointBorderColor: 'rgba(0, 0, 0, 0)',\r\n                            pointBackgroundColor: 'rgba(0, 0, 0, 0)',\r\n                            pointHoverBorderColor: '#000000',\r\n                            pointHoverBorderWidth: 4,\r\n                            pointHoverRadius: 6\r\n                        }\r\n                    ]\r\n                }}\r\n                options={{\r\n                    maintainAspectRatio: false,\r\n                    legend: {\r\n                        display: false\r\n                    },\r\n                    tooltips: {\r\n                        mode: \"index\",\r\n                        intersect: false\r\n                    },\r\n                    scales: {\r\n                        xAxes: [{\r\n                            type: \"time\",\r\n                            time: {\r\n                                format: \"MM/DD/YY\",\r\n                                tooltipFormat: \"ll\",\r\n                            },\r\n                            ticks: {\r\n                                display: false\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            ticks: {\r\n                                display: false\r\n                            }\r\n                        }]\r\n                    }\r\n                }}            \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\StatsRow.js",[],"C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\firebase.js",[],"C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\TimeLine.js",[],"C:\\Users\\tosha\\OneDrive\\Рабочий стол\\robinhood-clone\\src\\Chip.js",["61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":17,"column":17,"nodeType":"68","endLine":17,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":18,"column":17,"nodeType":"68","endLine":18,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":19,"column":17,"nodeType":"68","endLine":19,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":20,"column":17,"nodeType":"68","endLine":20,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":21,"column":17,"nodeType":"68","endLine":21,"endColumn":29},{"ruleId":"69","severity":1,"message":"70","line":8,"column":27,"nodeType":"71","messageId":"72","endLine":8,"endColumn":36},{"ruleId":"73","severity":1,"message":"74","line":52,"column":32,"nodeType":"75","messageId":"76","endLine":52,"endColumn":34},{"ruleId":"77","severity":1,"message":"78","line":67,"column":8,"nodeType":"79","endLine":67,"endColumn":10,"suggestions":"80"},{"ruleId":"69","severity":1,"message":"81","line":9,"column":11,"nodeType":"71","messageId":"72","endLine":9,"endColumn":15},{"ruleId":"82","severity":1,"message":"83","line":8,"column":17,"nodeType":"68","endLine":8,"endColumn":76},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'setTopics' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyStocks'. Either include it or remove the dependency array.","ArrayExpression",["86"],"'data' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [getMyStocks]",{"range":"89","text":"90"},[2208,2210],"[getMyStocks]"]